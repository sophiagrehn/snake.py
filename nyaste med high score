import turtle
import random

w = 1300
h = 800
food_size = 15
delay = 100

# Offset for snake movement directions
offsets = {
    "up": (0, 20),
    "down": (0, -20),
    "left": (-20, 0),
    "right": (20, 0)
}

# Variables for scoring and speed
score = 0
high_score = 0
initial_delay = delay  # Initial delay for snake movement

def reset():
    global snake, snake_dir, food_position, pen, score, delay, high_score
    snake = [[0, 0], [0, 20], [0, 40], [0, 60], [0, 80]]
    snake_dir = "up"
    food_position = get_random_food_position()
    food.goto(food_position)
    score = 0
    update_score()  # Update the score display
    delay = initial_delay  # Reset delay to initial value
    move_snake()
    pen.color("darkgreen")

def move_snake():
    global snake_dir, delay

    new_head = snake[-1].copy()
    new_head[0] = snake[-1][0] + offsets[snake_dir][0]
    new_head[1] = snake[-1][1] + offsets[snake_dir][1]

    if new_head in snake[:-1] or out_of_bounds(new_head):
        lost_game()
        return
    else:
        snake.append(new_head)

        if not food_collision():
            snake.pop(0)

        pen.clearstamps()

        for segment in snake:
            pen.goto(segment[0], segment[1])
            pen.stamp()

        screen.update()

        turtle.ontimer(move_snake, delay)

def out_of_bounds(pos):
    x, y = pos
    return x < -w/2 or x > w/2 or y < -h/2 or y > h/2

def food_collision():
    global food_position, score, delay, high_score
    if get_distance(snake[-1], food_position) < 20:
        food_position = get_random_food_position()
        food.goto(food_position)
        score += 1  # Increase score on each collision with food
        if score > high_score:
            high_score = score
        update_score()  # Update the score display
        delay -= 5  # Decrease delay to increase speed
        return True
    return False

def get_random_food_position():
    x = random.randint(- w / 2 + food_size, w / 2 - food_size)
    y = random.randint(- h / 2 + food_size, h / 2 - food_size)
    return (x, y)

def get_distance(pos1, pos2):
    x1, y1 = pos1
    x2, y2 = pos2
    distance = ((y2 - y1) ** 2 + (x2 - x1) ** 2) ** 0.5
    return distance

def update_score():
    score_display.clear()
    score_display.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Georgia", 18, "normal"))

def go_up():
    global snake_dir
    if snake_dir != "down":
        snake_dir = "up"

def go_right():
    global snake_dir
    if snake_dir != "left":
        snake_dir = "right"

def go_down():
    global snake_dir
    if snake_dir != "up":
        snake_dir = "down"

def go_left():
    global snake_dir
    if snake_dir != "right":
        snake_dir = "left"

def start_game():
    global start_button
    start_button.clear()
    pen.clear()  # Clear the "Game Over" and "Press SPACE to play again" messages
    screen.onkey(go_up, "Up")
    screen.onkey(go_right, "Right")
    screen.onkey(go_down, "Down")
    screen.onkey(go_left, "Left")
    reset()

def lost_game():
    pen.clear()
    pen.color("red")
    pen.goto(0, 50)
    pen.write("Game Over!!!", align="center", font=("Georgia", 50, "normal"))
    pen.goto(0, -50)
    pen.color("black")  # Set text color to black
    pen.write("Press SPACE to play again", align="center", font=("Georgia", 20, "normal"))
    screen.onkey(start_game, "space")  # Set up the space key to start the game again

screen = turtle.Screen()
screen.setup(w, h)
screen.title("Snake")
screen.bgcolor("lightgreen")
screen.tracer(0)

pen = turtle.Turtle("square")
pen.penup()
pen.color("darkgreen")

food = turtle.Turtle()
food.shape("circle")
food.color("red")
food.shapesize(food_size / 20)
food.penup()

# Create a Turtle to display the score
score_display = turtle.Turtle()
score_display.penup()
score_display.color("black")
score_display.goto(0, h/2 - 30)  # Adjust the position of the score display

start_button = turtle.Turtle()
start_button.speed(0)
start_button.color("white")
start_button.penup()
start_button.hideturtle()
start_button.goto(0, -50)
start_button.write("Press SPACE to Start\nUse arrow keys to play", align="center", font=("Georgia", 50, "normal"))

screen.listen()
screen.onkey(start_game, "space")

turtle.done()
